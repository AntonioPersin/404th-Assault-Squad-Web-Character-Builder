import { Component, OnInit } from '@angular/core';
import {Router} from '@angular/router';
import { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';
import { HttpClient } from '@angular/common/http';
import { HttpClientService } from '../services/http-client.service';
import { AuthenticationService } from '../services/authentication.service';
import { THIS_EXPR } from '@angular/compiler/src/output/output_ast';

@Component({
  selector: 'app-builder',
  templateUrl: './builder.component.html',
  styleUrls: ['./builder.component.css']
})
export class BuilderComponent implements OnInit {

  pPilotForm: FormGroup;
  pMechForm: FormGroup;
  ePilotForm: FormGroup;
  eMechForm: FormGroup;

  currUser;

  newpPilot=false;
  newpMech=false;
  newePilot=false;
  neweMech=false;

  GLOBALpointsLeft;
  GLOBALbaseHP;
  GLOBALbaseAC;
  GLOBALmechBaseAC;
  GLOBALmechBaseHP;
  GLOBALbaseXP;

  pointsLeft;

  pPHP;
  pPAC;
  pPXP;
  pPTURN;
  pPBNS=[];

  pMHP;
  pMAC;

  pBNSarm="can start with a cybernetic arm";
  pBNSleg="can start with a cybernetic leg";
  pBNSlimb="can start with any cybernetic limb";
  pBNS2limb="can start with any 2 cybernetic limbs";
  pBNSeye="can start with a cybernetic eye(heat-vision or night-vision)";
  pBNSbrain="can condense his/her brain into a chip";
  pBNSomni="starts with an extra omni tool slot";

  constructor(private fb:FormBuilder, private router:Router, private http:HttpClient, private httpClient:HttpClientService, private auth:AuthenticationService) { }

  ngOnInit(): void {
    if(!localStorage.getItem('user')){
      this.router.navigate(['/login']);
    }
    this.currUser=JSON.parse(localStorage.getItem('user'));

    this.GLOBALpointsLeft=24;
    this.GLOBALbaseHP=20;
    this.GLOBALbaseAC=6;
    this.GLOBALbaseXP=260;
    this.pPTURN="1 action";
    this.GLOBALmechBaseAC=4;
    this.GLOBALmechBaseHP=500;

    this.pPilotForm = new FormGroup({
      'pPilotName' : new FormControl(null),
      'pPilotMechName' : new FormControl(null),
      'pPilotSTR' : new FormControl(1),
      'pPilotPER' : new FormControl(1),
      'pPilotEND' : new FormControl(1),
      'pPilotINT' : new FormControl(1),
      'pPilotAGL' : new FormControl(1),
      'pPilotLCK' : new FormControl(1),
      'pPilotHP' : new FormControl({value:'', disabled:true}),
      'pPilotAC' : new FormControl({value:'', disabled:true}),
      'pPilotXP' : new FormControl({value:'', disabled:true}),
      'pPilotTURN' : new FormControl({value:'', disabled:true}),
      'pPilotBNS' : new FormControl({value:'', disabled:true}),
    });
    
    this.pPilotFormInit();

    this.onpPilotFormChanges();

    this.pMechForm = new FormGroup({
      'pMechName' : new FormControl(null),
      'pMechPilotName' : new FormControl(null),
      'pMechHP' : new FormControl({value:500, disabled:true}),
      'pMechAC' : new FormControl({value:4, disabled:true}),
      'pMechCore' : new FormControl(null),
      'pMechLSh' : new FormControl(null),
      'pMechRSh' : new FormControl(null),
      'pMechLHa' : new FormControl(null),
      'pMechRHa' : new FormControl(null),
      'pMechCS1' : new FormControl(null),
      'pMechCS2' : new FormControl(null),
      'pMechBS1' : new FormControl(null),
      'pMechBS2' : new FormControl(null),
      'pMechBS3' : new FormControl(null),
      'pMechBS4' : new FormControl(null),
      'pMechLLeg' : new FormControl(null),
      'pMechRLeg' : new FormControl(null),
    });

    this.pMechFormInit();

    this.onpMechFormChanges();

    this.ePilotForm = new FormGroup({
      'ePilotTier' : new FormControl(null),
      'ePilotType' : new FormControl(null),
      'ePilotHP' : new FormControl(null),
      'ePilotAC' : new FormControl(null),
      'ePilotLCK' : new FormControl(null),
      'ePilotTURN' : new FormControl(null),
      'ePilotHelmet' : new FormControl(null),
      'ePilotChest' : new FormControl(null),
      'ePilotBack' : new FormControl(null),
      'ePilotLegs' : new FormControl(null),
      'ePilotOmni' : new FormControl(null)
    });

    this.eMechForm = new FormGroup({
      'eMechTier' : new FormControl(null),
      'eMechType' : new FormControl(null),
      'eMechHP' : new FormControl(null),
      'eMechAC' : new FormControl(null),
      'eMechTURN' : new FormControl(null),
      'eMechCore' : new FormControl(null),
      'eMechLSh' : new FormControl(null),
      'eMechRSh' : new FormControl(null),
      'eMechLHa' : new FormControl(null),
      'eMechRHa' : new FormControl(null),
      'eMechCS1' : new FormControl(null),
      'eMechCS2' : new FormControl(null),
      'eMechBS1' : new FormControl(null),
      'eMechBS2' : new FormControl(null),
      'eMechBS3' : new FormControl(null),
      'eMechBS4' : new FormControl(null),
      'eMechLLeg' : new FormControl(null),
      'eMechRLeg' : new FormControl(null),
    });

  }

  onpPilotSubmit(){
    let pPilot=this.pPilotForm.getRawValue();
    pPilot.userId=JSON.parse(localStorage.getItem('user')).id;
    this.httpClient.addpPilot(pPilot).subscribe(res=>{
      this.router.navigate(['']);
    });
    console.log(pPilot);
  }

  onpMechSubmit(){
    let pMech=this.pMechForm.getRawValue();
    pMech.userId=JSON.parse(localStorage.getItem('user')).id;
    this.httpClient.addpMech(pMech).subscribe(res=>{
      this.router.navigate(['']);
    });
    console.log(pMech);
  }

  onePilotSubmit(){
    let ePilot=this.ePilotForm.getRawValue();
    ePilot.userId=JSON.parse(localStorage.getItem('user')).id;
    this.httpClient.addePilot(ePilot).subscribe(res=>{
      this.router.navigate(['']);
    });
    console.log(ePilot);
  }

  oneMechSubmit(){
    let eMech=this.eMechForm.getRawValue();
    eMech.userId=JSON.parse(localStorage.getItem('user')).id;
    this.httpClient.addeMech(eMech).subscribe(res=>{
      this.router.navigate(['']);
    });
    console.log(eMech);
  }

  logout(){
    this.auth.onLogout();
  }
  
  pPilotFormInit(){
    this.pointsLeft=this.GLOBALpointsLeft-(
      this.pPilotForm.get('pPilotSTR').value+
      this.pPilotForm.get('pPilotPER').value+
      this.pPilotForm.get('pPilotEND').value+
      this.pPilotForm.get('pPilotINT').value+
      this.pPilotForm.get('pPilotAGL').value+
      this.pPilotForm.get('pPilotLCK').value);

    this.pPHP=this.GLOBALbaseHP+this.pPilotForm.get('pPilotEND').value*5;
    this.pPilotForm.get('pPilotHP').setValue(this.pPHP);

    this.pPAC=this.GLOBALbaseAC+(this.pPilotForm.get('pPilotEND').value+this.pPilotForm.get('pPilotAGL').value)/2;
    if(this.pPilotForm.get('pPilotAGL').value>=7){
      this.pPAC+=1;
    }
    if(this.pPilotForm.get('pPilotAGL').value==10){
      this.pPAC+=1;
    }
    this.pPilotForm.get('pPilotAC').setValue(this.pPAC);

    this.pPXP=this.GLOBALbaseXP-this.pPilotForm.get('pPilotINT').value*10;
    this.pPilotForm.get('pPilotXP').setValue(this.pPXP);

    this.pPilotForm.get('pPilotTURN').setValue(this.pPTURN);
  }

  onpPilotFormChanges(){
    this.pPilotForm.valueChanges.subscribe(observer=>{
      this.pointsLeft=this.GLOBALpointsLeft-(
        this.pPilotForm.get('pPilotSTR').value+
        this.pPilotForm.get('pPilotPER').value+
        this.pPilotForm.get('pPilotEND').value+
        this.pPilotForm.get('pPilotINT').value+
        this.pPilotForm.get('pPilotAGL').value+
        this.pPilotForm.get('pPilotLCK').value);
        
      this.pPHP=this.GLOBALbaseHP+this.pPilotForm.get('pPilotEND').value*5;
      this.pPilotForm.get('pPilotHP').patchValue(this.pPHP,{emitEvent: false});

      this.pPAC=this.GLOBALbaseAC+Math.floor((this.pPilotForm.get('pPilotEND').value+this.pPilotForm.get('pPilotAGL').value)/2);
      if(this.pPilotForm.get('pPilotAGL').value>=7){
        this.pPAC+=1;
      }
      if(this.pPilotForm.get('pPilotAGL').value==10){
        this.pPAC+=1;
      }
      this.pPilotForm.get('pPilotAC').patchValue(this.pPAC,{emitEvent: false});

      this.pPXP=this.GLOBALbaseXP-this.pPilotForm.get('pPilotINT').value*10;
      this.pPilotForm.get('pPilotXP').patchValue(this.pPXP,{emitEvent: false});

      if(this.pPilotForm.get('pPilotAGL').value>=1 && this.pPilotForm.get('pPilotAGL').value<3){
        this.pPTURN="1 action";
      }else if(this.pPilotForm.get('pPilotAGL').value>=3 && this.pPilotForm.get('pPilotAGL').value<5){
        this.pPTURN="1 action, 1 move";
      }else if(this.pPilotForm.get('pPilotAGL').value>=5 && this.pPilotForm.get('pPilotAGL').value<9){
        this.pPTURN="1 action, 1 move, 1 attack";
      }else if(this.pPilotForm.get('pPilotAGL').value>=9){
        this.pPTURN="2 action, 1 move, 1 attack";
      }
      this.pPilotForm.get('pPilotTURN').patchValue(this.pPTURN,{emitEvent: false});

      if(this.pPilotForm.get('pPilotSTR').value==10 && !this.pPBNS.includes(this.pBNSarm)){
        this.pPBNS.push(this.pBNSarm);
      }else{
        this.pPBNS = this.pPBNS.filter(elem => elem!==this.pBNSarm);
      }
      if((this.pPilotForm.get('pPilotPER').value==10 || this.pPilotForm.get('pPilotEND').value>=6) && !this.pPBNS.includes(this.pBNSeye)){
        this.pPBNS.push(this.pBNSeye);
      }else{
        this.pPBNS = this.pPBNS.filter(elem => elem!==this.pBNSeye);
      }
      if((this.pPilotForm.get('pPilotEND').value>=3 && this.pPilotForm.get('pPilotEND').value<9) && !this.pPBNS.includes(this.pBNSlimb)){
        this.pPBNS.push(this.pBNSlimb);
      }else{
        this.pPBNS = this.pPBNS.filter(elem => elem!==this.pBNSlimb);
      }
      if(this.pPilotForm.get('pPilotEND').value>=9 && !this.pPBNS.includes(this.pBNS2limb)){
        this.pPBNS.push(this.pBNS2limb);
      }else{
        this.pPBNS = this.pPBNS.filter(elem => elem!==this.pBNS2limb);
      }
      if(this.pPilotForm.get('pPilotEND').value==10 && !this.pPBNS.includes(this.pBNSbrain)){
        this.pPBNS.push(this.pBNSbrain);
      }else{
        this.pPBNS = this.pPBNS.filter(elem => elem!==this.pBNSbrain);
      }
      if(this.pPilotForm.get('pPilotAGL').value==10 && !this.pPBNS.includes(this.pBNSleg)){
        this.pPBNS.push(this.pBNSleg);
      }else{
        this.pPBNS = this.pPBNS.filter(elem => elem!==this.pBNSleg);
      }
      if(this.pPilotForm.get('pPilotINT').value==10 && !this.pPBNS.includes(this.pBNSomni)){
        this.pPBNS.push(this.pBNSomni);
      }else{
        this.pPBNS = this.pPBNS.filter(elem => elem!==this.pBNSomni);
      }

      this.pPilotForm.get('pPilotBNS').patchValue(this.pPBNS.join("    "),{emitEvent: false});
    });
  }

  pMechFormInit(){
    this.pMHP=this.GLOBALmechBaseHP;
    this.pMechForm.get('pMechHP').setValue(this.pMHP);

    this.pMAC=this.GLOBALmechBaseAC;
    this.pMechForm.get('pMechAC').setValue(this.pMAC);
  }

  onpMechFormChanges(){
    this.pPilotForm.valueChanges.subscribe(observer=>{
      this.pMHP=this.GLOBALmechBaseHP;
      this.pMechForm.get('pMechHP').patchValue(this.pMHP,{emitEvent: false});
    });
  }

}
