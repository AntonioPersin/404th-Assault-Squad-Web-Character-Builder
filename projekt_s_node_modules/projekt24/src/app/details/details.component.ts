import { Component, OnInit } from '@angular/core';
import {Router, ActivatedRoute} from '@angular/router';
import { AuthenticationService } from '../services/authentication.service';
import { HttpClientService } from '../services/http-client.service';
import { FormGroup, FormControl, FormBuilder } from '@angular/forms';
import { Observable } from 'rxjs';

@Component({
  selector: 'app-details',
  templateUrl: './details.component.html',
  styleUrls: ['./details.component.css']
})
export class DetailsComponent implements OnInit {

  currUser;
  recId;
  type;
  myObject;
  pPilots:any[];
  pMechs:any[];
  ePilots:any[];
  eMechs:any[];

  pPilotForm: FormGroup;
  pMechForm: FormGroup;
  ePilotForm: FormGroup;
  eMechForm: FormGroup;

  GLOBALpointsLeft;
  GLOBALbaseHP;
  GLOBALbaseAC;
  GLOBALmechBaseAC;
  GLOBALmechBaseHP;
  GLOBALbaseXP;

  pointsLeft;

  pPHP;
  pPAC;
  pPXP;
  pPTURN;
  pPBNS=[];

  pMHP;
  pMAC;

  pBNSarm="can start with a cybernetic arm";
  pBNSleg="can start with a cybernetic leg";
  pBNSlimb="can start with any cybernetic limb";
  pBNS2limb="can start with any 2 cybernetic limbs";
  pBNSeye="can start with a cybernetic eye(heat-vision or night-vision)";
  pBNSbrain="can condense his/her brain into a chip";
  pBNSomni="starts with an extra omni tool slot";

  constructor(private router: Router, private auth:AuthenticationService, private route: ActivatedRoute, private httpClient: HttpClientService, private fb:FormBuilder) { }

  ngOnInit(): void {
    if(!localStorage.getItem('user')){
      this.router.navigate(['/login']);
    }
    this.currUser=JSON.parse(localStorage.getItem('user'));

    this.myObject=null;
    this.recId=this.route.snapshot.params['id'];
    this.type='noObj';
    console.log(this.recId);

    this.GLOBALpointsLeft=24;
    this.GLOBALbaseHP=20;
    this.GLOBALbaseAC=6;
    this.GLOBALbaseXP=260;
    this.pPTURN="1 action";
    this.GLOBALmechBaseAC=4;
    this.GLOBALmechBaseHP=500;
    
    new Observable(observer=>{setTimeout(()=>{

    
    this.httpClient.getpPilots().subscribe(res=>{
      this.pPilots=res;
      if(!this.myObject) this.myObject=this.pPilots.find(e=>e.id==this.recId);
      if(this.myObject && this.type=='noObj'){
        this.type="pP";
        this.initpPilotForm(this.myObject);
        this.onpPilotFormChanges();
      }
    });
    this.httpClient.getpMechs().subscribe(res=>{
      this.pMechs=res;
      if(!this.myObject) this.myObject=this.pMechs.find(e=>e.id==this.recId);
      if(this.myObject && this.type=='noObj'){
        this.type="pM";
        this.initpMechForm(this.myObject);
        this.onpMechFormChanges();
      }
    });
    this.httpClient.getePilots().subscribe(res=>{
      this.ePilots=res;
      if(!this.myObject) this.myObject=this.ePilots.find(e=>e.id==this.recId);
      if(this.myObject && this.type=='noObj'){
        this.type="eP";
        this.initePilotForm(this.myObject);
      }
    });
    this.httpClient.geteMechs().subscribe(res=>{
      this.eMechs=res;
      if(!this.myObject) this.myObject=this.eMechs.find(e=>e.id==this.recId);
      if(this.myObject && this.type=='noObj'){
        this.type="eM";
        this.initeMechForm(this.myObject);
      }
    });
  },500)}).subscribe(res=>{
    
  });
 
  }

  logout(){
    this.auth.onLogout();
  }

  initpPilotForm(target){
    this.pPilotForm = new FormGroup({
      'pPilotName' : new FormControl(target.pPilotName),
      'pPilotMechName' : new FormControl(target.pPilotMechName),
      'pPilotSTR' : new FormControl(target.pPilotSTR),
      'pPilotPER' : new FormControl(target.pPilotPER),
      'pPilotEND' : new FormControl(target.pPilotEND),
      'pPilotINT' : new FormControl(target.pPilotINT),
      'pPilotAGL' : new FormControl(target.pPilotAGL),
      'pPilotLCK' : new FormControl(target.pPilotLCK),
      'pPilotHP' : new FormControl({value:target.pPilotHP, disabled:true}),
      'pPilotAC' : new FormControl({value:target.pPilotAC, disabled:true}),
      'pPilotXP' : new FormControl({value:target.pPilotXP, disabled:true}),
      'pPilotTURN' : new FormControl({value:target.pPilotTURN, disabled:true}),
      'pPilotBNS' : new FormControl({value:target.pPilotBNS, disabled:true}),
    });

    this.pointsLeft=this.GLOBALpointsLeft-(
      this.pPilotForm.get('pPilotSTR').value+
      this.pPilotForm.get('pPilotPER').value+
      this.pPilotForm.get('pPilotEND').value+
      this.pPilotForm.get('pPilotINT').value+
      this.pPilotForm.get('pPilotAGL').value+
      this.pPilotForm.get('pPilotLCK').value);
  }

  initpMechForm(target){
    this.pMechForm = new FormGroup({
      'pMechName' : new FormControl(target.pMechName),
      'pMechPilotName' : new FormControl(target.pMechPilotName),
      'pMechHP' : new FormControl({value:500, disabled:true}),
      'pMechAC' : new FormControl({value:4, disabled:true}),
      'pMechCore' : new FormControl(target.pMechCore),
      'pMechLSh' : new FormControl(target.pMechLSh),
      'pMechRSh' : new FormControl(target.pMechRSh),
      'pMechLHa' : new FormControl(target.pMechLHa),
      'pMechRHa' : new FormControl(target.pMechRHa),
      'pMechCS1' : new FormControl(target.pMechCS1),
      'pMechCS2' : new FormControl(target.pMechCS2),
      'pMechBS1' : new FormControl(target.pMechBS1),
      'pMechBS2' : new FormControl(target.pMechBS2),
      'pMechBS3' : new FormControl(target.pMechBS3),
      'pMechBS4' : new FormControl(target.pMechBS4),
      'pMechLLeg' : new FormControl(target.pMechLLeg),
      'pMechRLeg' : new FormControl(target.pMechRLeg),
    });
  }

  initePilotForm(target){
    this.ePilotForm = new FormGroup({
      'ePilotTier' : new FormControl(target.ePilotTier),
      'ePilotType' : new FormControl(target.ePilotType),
      'ePilotHP' : new FormControl(target.ePilotHP),
      'ePilotAC' : new FormControl(target.ePilotAC),
      'ePilotLCK' : new FormControl(target.ePilotLCK),
      'ePilotTURN' : new FormControl(target.ePilotTURN),
      'ePilotHelmet' : new FormControl(target.ePilotHelmet),
      'ePilotChest' : new FormControl(target.ePilotChest),
      'ePilotBack' : new FormControl(target.ePilotBack),
      'ePilotLegs' : new FormControl(target.ePilotLegs),
      'ePilotOmni' : new FormControl(target.ePilotOmni)
    });
  }

  initeMechForm(target){
    this.eMechForm = new FormGroup({
      'eMechTier' : new FormControl(target.eMechTier),
      'eMechType' : new FormControl(target.eMechType),
      'eMechHP' : new FormControl({value:target.eMechHP,disabled:true}),
      'eMechAC' : new FormControl({value:target.eMechAC,disabled:true}),
      'eMechTURN' : new FormControl(target.eMechTURN),
      'eMechCore' : new FormControl(target.eMechCore),
      'eMechLSh' : new FormControl(target.eMechLSh),
      'eMechRSh' : new FormControl(target.eMechRSh),
      'eMechLHa' : new FormControl(target.eMechLHa),
      'eMechRHa' : new FormControl(target.eMechRHa),
      'eMechCS1' : new FormControl(target.eMechCS1),
      'eMechCS2' : new FormControl(target.eMechCS2),
      'eMechBS1' : new FormControl(target.eMechBS1),
      'eMechBS2' : new FormControl(target.eMechBS2),
      'eMechBS3' : new FormControl(target.eMechBS3),
      'eMechBS4' : new FormControl(target.eMechBS4),
      'eMechLLeg' : new FormControl(target.eMechLLeg),
      'eMechRLeg' : new FormControl(target.eMechRLeg),
    });
  }

  onpPilotFormChanges(){
    this.pPilotForm.valueChanges.subscribe(observer=>{
      this.pointsLeft=this.GLOBALpointsLeft-(
        this.pPilotForm.get('pPilotSTR').value+
        this.pPilotForm.get('pPilotPER').value+
        this.pPilotForm.get('pPilotEND').value+
        this.pPilotForm.get('pPilotINT').value+
        this.pPilotForm.get('pPilotAGL').value+
        this.pPilotForm.get('pPilotLCK').value);
        
      this.pPHP=this.GLOBALbaseHP+this.pPilotForm.get('pPilotEND').value*5;
      this.pPilotForm.get('pPilotHP').patchValue(this.pPHP,{emitEvent: false});

      this.pPAC=this.GLOBALbaseAC+Math.floor((this.pPilotForm.get('pPilotEND').value+this.pPilotForm.get('pPilotAGL').value)/2);
      if(this.pPilotForm.get('pPilotAGL').value>=7){
        this.pPAC+=1;
      }
      if(this.pPilotForm.get('pPilotAGL').value==10){
        this.pPAC+=1;
      }
      this.pPilotForm.get('pPilotAC').patchValue(this.pPAC,{emitEvent: false});

      this.pPXP=this.GLOBALbaseXP-this.pPilotForm.get('pPilotINT').value*10;
      this.pPilotForm.get('pPilotXP').patchValue(this.pPXP,{emitEvent: false});

      if(this.pPilotForm.get('pPilotAGL').value>=1 && this.pPilotForm.get('pPilotAGL').value<3){
        this.pPTURN="1 action";
      }else if(this.pPilotForm.get('pPilotAGL').value>=3 && this.pPilotForm.get('pPilotAGL').value<5){
        this.pPTURN="1 action, 1 move";
      }else if(this.pPilotForm.get('pPilotAGL').value>=5 && this.pPilotForm.get('pPilotAGL').value<9){
        this.pPTURN="1 action, 1 move, 1 attack";
      }else if(this.pPilotForm.get('pPilotAGL').value>=9){
        this.pPTURN="2 action, 1 move, 1 attack";
      }
      this.pPilotForm.get('pPilotTURN').patchValue(this.pPTURN,{emitEvent: false});

      if(this.pPilotForm.get('pPilotSTR').value==10 && !this.pPBNS.includes(this.pBNSarm)){
        this.pPBNS.push(this.pBNSarm);
      }else{
        this.pPBNS = this.pPBNS.filter(elem => elem!==this.pBNSarm);
      }
      if((this.pPilotForm.get('pPilotPER').value==10 || this.pPilotForm.get('pPilotEND').value>=6) && !this.pPBNS.includes(this.pBNSeye)){
        this.pPBNS.push(this.pBNSeye);
      }else{
        this.pPBNS = this.pPBNS.filter(elem => elem!==this.pBNSeye);
      }
      if((this.pPilotForm.get('pPilotEND').value>=3 && this.pPilotForm.get('pPilotEND').value<9) && !this.pPBNS.includes(this.pBNSlimb)){
        this.pPBNS.push(this.pBNSlimb);
      }else{
        this.pPBNS = this.pPBNS.filter(elem => elem!==this.pBNSlimb);
      }
      if(this.pPilotForm.get('pPilotEND').value>=9 && !this.pPBNS.includes(this.pBNS2limb)){
        this.pPBNS.push(this.pBNS2limb);
      }else{
        this.pPBNS = this.pPBNS.filter(elem => elem!==this.pBNS2limb);
      }
      if(this.pPilotForm.get('pPilotEND').value==10 && !this.pPBNS.includes(this.pBNSbrain)){
        this.pPBNS.push(this.pBNSbrain);
      }else{
        this.pPBNS = this.pPBNS.filter(elem => elem!==this.pBNSbrain);
      }
      if(this.pPilotForm.get('pPilotAGL').value==10 && !this.pPBNS.includes(this.pBNSleg)){
        this.pPBNS.push(this.pBNSleg);
      }else{
        this.pPBNS = this.pPBNS.filter(elem => elem!==this.pBNSleg);
      }
      if(this.pPilotForm.get('pPilotINT').value==10 && !this.pPBNS.includes(this.pBNSomni)){
        this.pPBNS.push(this.pBNSomni);
      }else{
        this.pPBNS = this.pPBNS.filter(elem => elem!==this.pBNSomni);
      }

      this.pPilotForm.get('pPilotBNS').patchValue(this.pPBNS.join("    "),{emitEvent: false});
    });
  }

  onpMechFormChanges(){
    this.pPilotForm.valueChanges.subscribe(observer=>{
      this.pMHP=this.GLOBALmechBaseHP;
      this.pMechForm.get('pMechHP').patchValue(this.pMHP,{emitEvent: false});
    });
  }

  onpPilotSubmit(){
    let pPilot=this.pPilotForm.getRawValue();
    pPilot.id=this.recId;
    pPilot.userId=this.myObject.userId;
    this.httpClient.editpPilot(pPilot).subscribe(res=>{
      this.router.navigate(['/']);
    });

  }
  onpMechSubmit(){
    let pMech=this.pMechForm.getRawValue();
    pMech.id=this.recId;
    pMech.userId=this.myObject.userId;
    this.httpClient.editpMech(pMech).subscribe(res=>{
      this.router.navigate(['/']);
    });
  }
  onePilotSubmit(){
    let ePilot=this.ePilotForm.getRawValue();
    ePilot.id=this.recId;
    ePilot.userId=this.myObject.userId;
    this.httpClient.editePilot(ePilot).subscribe(res=>{
      this.router.navigate(['/']);
    });
  }
  oneMechSubmit(){
    let eMech=this.eMechForm.getRawValue();
    eMech.id=this.recId;
    eMech.userId=this.myObject.userId;
    this.httpClient.editeMech(eMech).subscribe(res=>{
      this.router.navigate(['/']);
    });
  }
}
